name: "CI"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  check:
    name: Check Commit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Expose GIT Commit Data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Parse
        id: parse
        run: |
          echo "::set-output name=is_release::${{ startsWith(env.GIT_COMMIT_MESSAGE_SUBJECT, 'Release ') }}"
          echo "::set-output name=version::$(echo ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | sed -r 's/Release //')"
          echo "::set-output name=tag::$(echo ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }} | sed -r 's/Release /v/')"

      - run: echo "${{ steps.parse.outputs.is_release }}"
      - run: echo "${{ steps.parse.outputs.version }}"
      - run: echo "${{ steps.parse.outputs.tag }}"

      - name: Create Tag
        if: ${{ steps.parse.outputs.is_release == 'true' }}
        uses: negz/create-tag@v1
        with:
          version: ${{ steps.parse.outputs.tag }}
          message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
          token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      is_release: ${{ steps.parse.outputs.is_release }}
      version: ${{ steps.parse.outputs.version }}
      tag: ${{ steps.parse.outputs.tag }}
      commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
      commit_body: ${{ env.GIT_COMMIT_MESSAGE_BODY }}

  build:
    name: Build
    runs-on: ubuntu-18.04
    needs: [check]
    if: ${{ success() && needs.check.outputs.is_release == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: "x64"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build with PyInstaller
        run: |
          sh ./scripts/build.sh

      - name: Create the One Line Installer
        run: |
          cat ./scripts/install.sh | sed -r "s/V_TAG/${{ needs.check.outputs.tag }}/" > ./dist/install.sh
          md5sum ./dist/scale' > ./dist/checksum.md5

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign with GPG
        run: gpg --sign --detach-sign --armor ./dist/scale

      - name: Attach Public Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > ./dist/scale.gpg.key

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.check.outputs.version }}
          body: "**Automated release ${{ needs.check.outputs.commit_message }}** by GitHub Actions <3\n\n ${{ needs.check.outputs.commit_body }}\nOneLiner: ```wget https://github.com/hisorange/scale/releases/download/${{ needs.check.outputs.tag }}/install.sh  -O - | sh && scale```"
          tag_name: ${{ needs.check.outputs.tag }}
          draft: false
          prerelease: false
          files: ./dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      url: ${{ steps.release.outputs.url }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [check, build]

    steps:
      - name: Notify the Author(s)
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Release Notification
          SLACK_AVATAR: sender
        with:
          args: "[${{ github.repository }}] Published the release [${{ needs.check.outputs.version }}] available\n${{ needs.build.outputs.url }}\n${{ needs.build.outputs.upload_url }}"
